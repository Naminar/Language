
#ifndef DATABASE_

#define DATABASE_

#include "tree.h"
#include "config.h"
#include "latex.h"
#include <string.h>
#include "../HashTable/include/hash_table.h"
#include "../HashList/list.h"

//===============================================

const size_t SYNTAX_ERROR = 0;

//===============================================



char*   scanf_string        (FILE* in_file);
Node*   son_init            (Node** one_node_son);
void    argument_reader     (FILE* in_file, Node* node);

void    do_tree_simplify    (Node** node);
Node*   tree_cpy            (Node* main_node);
Node*   simple_node         (Node* tested_node);

Node*   MUL_node            (Node* right_node, Node* left_node);
void    argument_indent     (const char* arg_string, Node* node);
Node*   do_data_loading     (const char *const data_file = nullptr);
void    num_indent          (Node* node, const char *const arg_string);

void    SpecialNodeHash     (Node* node);
Node*   diff_node           (FILE* tex_file, Node* node, Tree* phrase_tree_union);
void    hash_init           (Node* root, HashTree* hash_list, HashTree* hash_tree);

void    final_forming_notes (FILE* tex_file, Node* node,        HashTree* hash_list);
void    tex_conclusion      (FILE* tex_file, Node* diff_root,   HashTree* hash_list);
void    special_formate     (FILE* tex_file, Node* node,        HashTree* hash_list);

void    place_one_record_node
        (FILE* tex_file, Tree* phrase_tree_union, Node* function_node, Node* diff_node);

Node*   new_node
        (Type a_type, OperAndFunc a_stat =  NULL_OPER, Node* right_node = nullptr,
         Node* left_node = nullptr);

#endif // DATABASE_
