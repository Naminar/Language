
#include "../include/differentiator.h"
#include "../HashList/table.h"



void differentiator(void)
{
    Node* root = do_data_loading();

    //graph_tree_dump(root);

    printf("\n");

    //print_in(root);

        FILE* tex_file = fopen("Article.tex", "w");

        assert(tex_file);

        do_header(tex_file, root);

        Tree* phrase_tree_union = do_hash_table("box/phrases.txt", "box/phrasesINF.txt");

    Node* diff_root = diff_node(tex_file, root, phrase_tree_union);

    tree_destruct(root);

    //graph_tree_dump(diff_root);

    do_tree_simplify(&diff_root);

    pro_print(diff_root);

    //printf("%zu",node_depth(diff_root));

    //graph_tree_dump(diff_root);

    //print_in(diff_root);

        fseek(tex_file, - sizeof ("\\newline\\newline\n"), SEEK_CUR );

        fprintf(tex_file,

                "\n\\section*{"

                "\\centering After simplifications of expression we have this derivative.}"

                "\n{\\large f$^{'}$(x) = $"
               );

        HashTree* hash_tree = H_do_hash_table();

        HashTree* hash_list = (HashTree*) calloc(1, sizeof (HashTree));

        H_list_init(hash_list, 200);

        hash_init(diff_root, hash_list, hash_tree);

        ///////forming_notes(tex_file, diff_root);

        tex_conclusion(tex_file, diff_root, hash_list);


    H_tree_union_destructor(hash_tree);

    H_list_destructor(&tree_union[ind]);
    
    //H_tree_union_destructor(hash_list);

    tree_destruct(diff_root);

    tree_union_destructor(phrase_tree_union);

    fclose(tex_file);

    //graph_tree_dump(root);

    /*Node* copy =  tree_cpy(root);

    graph_tree_dump(copy);

    tree_destruct(copy);*/

    //graph_tree_dump(root);

    //tree_destruct(root);
}






